[1mdiff --git a/app/Contact.php b/app/Contact.php[m
[1mindex e53e3cd..963ffca 100644[m
[1m--- a/app/Contact.php[m
[1m+++ b/app/Contact.php[m
[36m@@ -179,78 +179,119 @@[m [mclass Contact extends Model[m
     {[m
         $contacts = Contact::where('contact.id', '>', 0);[m
 [m
[31m-        foreach ($searches as $search) {[m
[32m+[m[32m        $contacts = self::buildWhere($contacts, $searches);[m
[32m+[m
[32m+[m
[32m+[m[32m        switch ($sort_type) {[m
[32m+[m[32m            case 'id-desc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.id', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'id-asc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.id', 'asc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'email-desc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.email', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'email-asc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.email', 'asc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'name-desc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.last_name', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'name-asc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.last_name', 'asc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'creation-date-desc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.created_at', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            case 'last-login-date-desc':[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact_user.last_login_at', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m            default:[m
[32m+[m[32m                $contacts = $contacts->orderBy('contact.id', 'desc');[m
[32m+[m[32m                break;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // joins can't be added into subqueries, so they can't be included in the recursive buildWhere[m
[32m+[m[32m        // there also isn't a good way to look up column usage without recursively searching through[m
[32m+[m[32m        // subqueries in getQuery()->wheres. so we need to check the sql output for the column.[m
[32m+[m[32m        $query_string = $contacts->toSql();[m
[32m+[m[32m        Log::info($query_string);[m
[32m+[m[32m        if (strpos($query_string, 'note') !== false) {[m
[32m+[m[32m            $contacts->join('note', function ($join_note) {[m
[32m+[m[32m                return $join_note->on('contact.id', '=', 'note.notable_id')[m
[32m+[m[32m                    ->where('note.notable_type', '=', 'App\\Contact');[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        if (strpos($query_string, 'owner') !== false) {[m
[32m+[m[32m            $contacts->join('contact_relationship', 'contact.id', '=', 'contact_relationship.contact_id')[m
[32m+[m[32m                ->join('user AS owner', function ($join_user) {[m
[32m+[m[32m                    $join_user->on('contact_relationship.user_id', '=', 'owner.id');[m
[32m+[m[32m                });[m
[32m+[m[32m        }[m
[32m+[m[32m        if (strpos($query_string, 'contact_user') !== false) {[m
[32m+[m[32m            $contacts->join('user AS contact_user', function ($join_user) {[m
[32m+[m[32m                $join_user->on('contact.user_id', '=', 'contact_user.id');[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        if (strpos($query_string, 'address') !== false) {[m
[32m+[m[32m            $contacts->join('address_contact', 'contact.id', '=', 'address_contact.contact_id')[m
[32m+[m[32m                ->join('address', function ($join_address) {[m
[32m+[m[32m                    $join_address->on('address_contact.address_id', '=', 'address.id');[m
[32m+[m[32m                });[m
[32m+[m[32m        }[m
[32m+[m[32m        Log::info($contacts->toSql());[m
[32m+[m
[32m+[m[32m        return $contacts->select('contact.*');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static function buildWhere($query, $searches) {[m
[32m+[m[32m        foreach ($searches as $search_key => $search) {[m
             $search_value = $search->getValue();[m
[31m-            $conjunction = strtolower($search->getOperator());[m
[31m-            $index = $search->getIndex();[m
[31m-            switch ($index) {[m
[32m+[m[32m            $conjunction = strtolower($search->getConjunction());[m
[32m+[m[32m            $label = $search->getLabel();[m
[32m+[m[32m            switch ($label) {[m
                 case 'id':[m
                     $search_value = (int)$search_value;[m
[31m-                    $contacts = $contacts->where('contact.id', '=', $search_value, $conjunction);[m
[32m+[m[32m                    $query = $query->where('contact.id', '=', $search_value, $conjunction);[m
                     break;[m
                 case 'title':[m
[31m-                    $contacts = $contacts->where('contact.title', 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where('contact.title', 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'email':[m
[31m-                    $contacts = $contacts->where('contact.email', 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where('contact.email', 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'owner':[m
[31m-                    if ($contacts->getQuery()->joins === null[m
[31m-                        || array_search('contact_relationship', array_column((array)$contacts->getQuery()->joins, 'table')) === false[m
[31m-                        || array_search('user', array_column((array)$contacts->getQuery()->joins, 'table')) === false[m
[31m-                    ) {[m
[31m-                        $contacts = $contacts->join('contact_relationship', 'contact.id', '=', 'contact_relationship.contact_id')[m
[31m-                            ->join('user', function ($join_user) {[m
[31m-                                $join_user->on('contact_relationship.user_id', '=', 'user.id');[m
[31m-                            });[m
[31m-                    }[m
[31m-                    $contacts = $contacts->where(DB::raw('CONCAT(user.first_name, " ", user.last_name)'), 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where(DB::raw('CONCAT(owner.first_name, " ", owner.last_name)'), 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'note':[m
[31m-                    if ($contacts->getQuery()->joins === null[m
[31m-                        || array_search('note', array_column((array)$contacts->getQuery()->joins, 'table')) === false[m
[31m-                    ) {[m
[31m-                        $contacts = $contacts->join('note', function ($join_note) {[m
[31m-                            $join_note->on('contact.id', '=', 'note.notable_id')[m
[31m-                                ->where('note.notable_type', '=', 'App\\Contact');[m
[31m-                        });[m
[31m-                    }[m
[31m-                    $contacts = $contacts->where('note.content', 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where('note.content', 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'location':[m
[31m-                    if ($contacts->getQuery()->joins === null[m
[31m-                        || array_search('address_contact', array_column((array)$contacts->getQuery()->joins, 'table')) === false[m
[31m-                        || array_search('address', array_column((array)$contacts->getQuery()->joins, 'table')) === false[m
[31m-                    ) {[m
[31m-                        $contacts = $contacts->join('address_contact', 'contact.id', '=', 'address_contact.contact_id')[m
[31m-                            ->join('address', function ($join_address) {[m
[31m-                                $join_address->on('address_contact.address_id', '=', 'address.id');[m
[31m-                            });[m
[31m-                    }[m
[31m-                    $contacts = $contacts->where(DB::raw('CONCAT(address.line1, " ", address.line2, " ", address.city, " ", address.state, " ", address.postal_code, " ", address.country, " ")'), 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where(DB::raw('CONCAT(address.line1, " ", address.line2, " ", address.city, " ", address.state, " ", address.postal_code, " ", address.country, " ")'), 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'organization':[m
[31m-                    $contacts = $contacts->where('contact.organization', 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where('contact.organization', 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 case 'job_seeking_type':[m
                     switch ($search_value) {[m
                         case 'internship':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'internship', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'internship', $conjunction);[m
                             break;[m
                         case 'entry_level':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'entry_level', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'entry_level', $conjunction);[m
                             break;[m
                         case 'mid_level':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'mid_level', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'mid_level', $conjunction);[m
                             break;[m
                         case 'entry_level_management':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'entry_level_management', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'entry_level_management', $conjunction);[m
                             break;[m
                         case 'mid_level_management':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'mid_level_management', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'mid_level_management', $conjunction);[m
                             break;[m
                         case 'executive':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_type', '=', 'executive', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_type', '=', 'executive', $conjunction);[m
                             break;[m
                         case 'all':[m
                         default:[m
[36m@@ -260,58 +301,44 @@[m [mclass Contact extends Model[m
                 case 'job_seeking_status':[m
                     switch ($search_value) {[m
                         case 'unemployed':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_status', '=', 'unemployed', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_status', '=', 'unemployed', $conjunction);[m
                             break;[m
                         case 'employed_active':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_status', '=', 'employed_active', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_status', '=', 'employed_active', $conjunction);[m
                             break;[m
                         case 'employed_passive':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_status', '=', 'employed_passive', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_status', '=', 'employed_passive', $conjunction);[m
                             break;[m
                         case 'employed_future':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_status', '=', 'employed_future', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_status', '=', 'employed_future', $conjunction);[m
                             break;[m
                         case 'employed_not':[m
[31m-                            $contacts = $contacts->where('contact.job_seeking_status', '=', 'employed_not', $conjunction);[m
[32m+[m[32m                            $query = $query->where('contact.job_seeking_status', '=', 'employed_not', $conjunction);[m
                             break;[m
                         case 'all':[m
                         default:[m
                             break;[m
                     }[m
                     break;[m
[32m+[m[32m                case '(':[m
[32m+[m[32m                    if ($conjunction === "and") {[m
[32m+[m[32m                        $query = $query->where(function($query) use ($search_value) {[m
[32m+[m[32m                            return self::buildWhere($query, $search_value);[m
[32m+[m[32m                        });[m
[32m+[m[32m                    } else if ($conjunction === "or") {[m
[32m+[m[32m                        $query = $query->orWhere(function($query) use ($search_value) {[m
[32m+[m[32m                            return self::buildWhere($query, $search_value);[m
[32m+[m[32m                        });[m
[32m+[m[32m                    }[m
[32m+[m[32m                    break;[m
                 case 'name':[m
                 case 'default':[m
[31m-                    $contacts = $contacts->where(DB::raw('CONCAT(contact.first_name, " ", contact.last_name)'), 'like', "%$search_value%", $conjunction);[m
[32m+[m[32m                    $query = $query->where(DB::raw('CONCAT(contact.first_name, " ", contact.last_name)'), 'like', "%$search_value%", $conjunction);[m
                     break;[m
                 default:[m
[31m-                    throw new InvalidSearchException("Label ".$index." does not exist.");[m
[32m+[m[32m                    throw new InvalidSearchException("Label ".$label." does not exist.");[m
             }[m
         }[m
[31m-[m
[31m-        switch ($sort_type) {[m
[31m-            case 'id-desc':[m
[31m-                $contacts = $contacts->orderBy('contact.id', 'desc');[m
[31m-                break;[m
[31m-            case 'id-asc':[m
[31m-                $contacts = $contacts->orderBy('contact.id', 'asc');[m
[31m-                break;[m
[31m-            case 'email-desc':[m
[31m-                $contacts = $contacts->orderBy('contact.email', 'desc');[m
[31m-                break;[m
[31m-            case 'email-asc':[m
[31m-                $contacts = $contacts->orderBy('contact.email', 'asc');[m
[31m-                break;[m
[31m-            case 'name-desc':[m
[31m-                $contacts = $contacts->orderBy('contact.last_name', 'desc');[m
[31m-                break;[m
[31m-            case 'name-asc':[m
[31m-                $contacts = $contacts->orderBy('contact.last_name', 'asc');[m
[31m-                break;[m
[31m-            default:[m
[31m-                $contacts = $contacts->orderBy('contact.id', 'desc');[m
[31m-                break;[m
[31m-        }[m
[31m-[m
[31m-        return $contacts->select('contact.*');[m
[32m+[m[32m        return $query;[m
     }[m
 }[m
